@page "/card-lookup"
@using MagicTheGathering.Shared.Models
@inject HttpClient Http

<div style="display:flex; flex-direction:column; align-items:center; text-align:center; margin-top:30px;">
    <h3>Card lookup</h3>

    <select @bind="formatType">
        @foreach (var format in CardOptions.Formats)
        {
            <option value="@format.Value">@format.Display</option>
        }
    </select>


    <select @bind="colorType">
        @foreach (var color in CardOptions.Colors)
        {
            <option value="@color.Value">@color.Display</option>
        }
    </select>

    <button @onclick="() => OnSearch(formatType, colorType)" style="margin-top:10px;">Search</button>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (hasError)
{
    <p style="color:red">Card not found or error occurred.</p>
}
else if (cards?.Count > 0)
{
    <div style="display:flex; flex-wrap:wrap; justify-content:center; gap:10px; margin-top:20px;">
        @foreach (var c in cards)
        {
            <img src="@(c?.ImageUri?.Normal ?? "images/placeholder.png")"
                 alt="@(c?.Name ?? "Unknown")"
                 @onclick="() => ShowZoom(c?.ImageUri?.Normal, c?.Name)"
                 style="cursor:pointer; width:223px; height:310px; border-radius:8px; box-shadow:0 2px 6px rgba(0,0,0,0.3);" />
        }
    </div>

    @if (hasMore)
    {
        <button @onclick="LoadMore" style="margin-top:20px;">Load More</button>
    }
}

@if (zoomedCardUrl != null)
{
    <div style="position:fixed; top:0; left:0; width:100%; height:100%;
                background:rgba(0,0,0,0.7); display:flex; justify-content:center; align-items:center; z-index:1000;"
         @onclick="CloseZoom">
        <div style="position:relative;">
            <img src="@zoomedCardUrl" alt="@zoomedCardName"
                 style="max-width:90vw; max-height:90vh; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.5);" />
            <button @onclick="CloseZoom"
                    style="position:absolute; top:-10px; right:-10px; background:red; color:white; border:none; border-radius:50%; width:30px; height:30px; cursor:pointer;">
                ✕
            </button>
        </div>
    </div>
}

@code {
    private string formatType = string.Empty;
    private string colorType = string.Empty;

    private List<Card> cards = new();
    private bool isLoading = false;
    private bool hasError = false;

    private bool hasMore = false;
    private int currentPage = 1;

    private string? zoomedCardUrl = null;
    private string? zoomedCardName = null;

    private async Task OnSearch(string format, string color)
    {
        if (string.IsNullOrWhiteSpace(format) || string.IsNullOrWhiteSpace(color))
            return;

        isLoading = true;
        hasError = false;
        cards = new();
        currentPage = 1;

        await LoadCards(format, color, currentPage);
    }

    private async Task LoadCards(string format, string color, int page)
    {
        try
        {
            var result = await Http.GetFromJsonAsync<PagedResult<Card>>(
                $"Card/search/{format}/{color}?page={page}");

            if (result == null || result.Data == null || result.Data.Count == 0)
            {
                hasError = true;
                hasMore = false;
                return;
            }

            cards.AddRange(result.Data.Where(c => c?.ImageUri?.Normal != null));
            hasMore = result.HasMore;
            currentPage++;
        }
        catch (Exception ex)
        {
            hasError = true;
            Console.WriteLine(ex); // or Debug.WriteLine
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMore()
    {
        await LoadCards(formatType, colorType, currentPage);
    }

    private void ShowZoom(string? url, string? name)
    {
        zoomedCardUrl = url;
        zoomedCardName = name;
    }

    private void CloseZoom()
    {
        zoomedCardUrl = null;
        zoomedCardName = null;
    }
}
