@page "/single-card-lookup"
@using MagicTheGathering.Shared.Models
@inject HttpClient Http

<div style="display:flex; flex-direction:column; align-items:center; text-align:center; margin-top:30px;">

    <h3>Single Card lookup</h3>
    <input @bind="cardName" placeholder="Enter search term" style="margin-top:10px;" />
    <button @onclick="OnSearch" style="margin-top:10px;">Search</button>

</div>

@if (card != null)
{
    <div style="display:flex; flex-direction:row; align-items:flex-start; margin-top:30px;">

        <!-- Left: Card Image -->
        <div>
            @if (card.ImageUri?.Normal != null)
            {
                <img src="@card.ImageUri.Normal" alt="@card.Name" style="max-width:300px; height:auto;" />
            }
        </div>

        <!-- Right: Keywords + Legalities -->
        <div style="margin-left:20px;">
            <h4>Keywords:</h4>
            <ul>
                @foreach (var keyword in card.Keywords)
                {
                    <li>@keyword</li>
                }
            </ul>

            <h4>Legalities</h4>
            <ul>
                @foreach (var legality in card.Legality.GetType().GetProperties())
                {
                    var format = legality.Name;
                    var value = legality.GetValue(card.Legality)?.ToString();

                    if (!string.IsNullOrWhiteSpace(value))
                    {
                        <li>@format: @value</li>
                    }
                }
            </ul>
        </div>
    </div>

}
else if (isLoading)
{
    <p>Loading...</p>
}
else if (hasError)
{
    <p style="color:red">Card not found or error occurred.</p>
}

@code {
    private string cardName = string.Empty;
    private string formatType = "format";
    private string colorType = "color";

    private Card? card;
    private bool isLoading = false;
    private bool hasError = false;

    private async Task OnSearch()
    {
        await GetCard();
    }

    private async Task GetCard()
    {
        if (string.IsNullOrWhiteSpace(cardName))
            return;

        isLoading = true;
        hasError = false;
        card = null;

        try
        {
            // Step 1: Get basic card info by name
            var basicCard = await Http.GetFromJsonAsync<Card>(
                $"Card/name/{Uri.EscapeDataString(cardName)}");

            if (basicCard == null || string.IsNullOrWhiteSpace(basicCard.Id))
            {
                hasError = true;
                return;
            }

            // Respect Scryfall's rate limit (50–100 ms delay)
            await Task.Delay(100);

            // Step 2: Use Id to get full card details
            card = await Http.GetFromJsonAsync<Card>(
                $"Card/card/{basicCard.Id}");
        }
        catch (Exception)
        {
            hasError = true;
        }
        finally
        {
            isLoading = false;
        }
    }
}